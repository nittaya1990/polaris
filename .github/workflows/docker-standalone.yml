# Tencent is pleased to support the open source community by making Polaris available.
#
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
#
# Licensed under the BSD 3-Clause License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://opensource.org/licenses/BSD-3-Clause
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

name: Standalone(Docker)

on:
  workflow_dispatch:
    inputs:
      server_version:
        description: "tag version for polaris"
        required: true
      console_version:
        description: "tag version for polaris-console"
        required: true
      limiter_version:
        description: "tag version for polaris-limiter"
        required: true

jobs:
  release:
    name: Release polaris standalone docker-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.server_version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          config-inline: |
            insecure-entitlements = [ "network.host" ]

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.POLARIS_DOCKER_NAME }}
          password: ${{ secrets.POLARIS_DOCKER_PASSWORD }}

      - name: Build
        id: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          SERVER_VERSION: ${{ github.event.inputs.server_version }}
          CONSOLE_VERSION: ${{ github.event.inputs.console_version }}
          LIMITER_VERSION: ${{ github.event.inputs.limiter_version }}
        run: |
          set -e
          cd deploy/standalone

          POLARIS_GIT_PATH=https://github.com/polarismesh

          DIR_NAME=polaris-standalone-release_${SERVER_VERSION}.${GOOS}
          rm -rf ${DIR_NAME}
          mkdir ${DIR_NAME}
          cd ${DIR_NAME}

          arch_list=("amd64" "arm64")
          platforms=""

          for GOARCH in ${arch_list[@]}; do
              SERVER_PKG_NAME=polaris-server-release_${SERVER_VERSION}.${GOOS}.${GOARCH}.zip
              wget -T10 -t3 ${POLARIS_GIT_PATH}/polaris/releases/download/${SERVER_VERSION}/${SERVER_PKG_NAME} --no-check-certificate
              CONSOLE_PKG_NAME=polaris-console-release_${CONSOLE_VERSION}.${GOOS}.${GOARCH}.zip
              wget -T10 -t3 ${POLARIS_GIT_PATH}/polaris-console/releases/download/${CONSOLE_VERSION}/${CONSOLE_PKG_NAME} --no-check-certificate
              LIMITER_PKG_NAME=polaris-limiter-release_${LIMITER_VERSION}.${GOOS}.${GOARCH}.zip
              wget -T10 -t3 ${POLARIS_GIT_PATH}/polaris-limiter/releases/download/${LIMITER_VERSION}/${LIMITER_PKG_NAME} --no-check-certificate
              
              wget -T10 -t3 https://github.com/prometheus/prometheus/releases/download/v2.28.0/prometheus-2.28.0.${GOOS}-${GOARCH}.tar.gz
              wget -T10 -t3 https://github.com/prometheus/pushgateway/releases/download/v1.4.1/pushgateway-1.4.1.${GOOS}-${GOARCH}.tar.gz
              
              platforms+="${GOOS}/${GOARCH},"
          done

          platforms=${platforms::-1}

          cp ../vm/install-${GOOS}.sh ./install.sh
          cp ../vm/uninstall-${GOOS}.sh ./uninstall.sh
          cp ../vm/prometheus-help.sh ./prometheus-help.sh
          cp ../vm/port.properties ./port.properties
          cp ../vm/Dockerfile ./Dockerfile

          echo "#!/bin/bash" >"run.sh"
          echo "" >>"run.sh"
          echo "bash install.sh" >>"run.sh"
          echo "while ((1))" >>"run.sh"
          echo "do" >>"run.sh"
          echo "   sleep 1" >>"run.sh"
          echo "done" >>"run.sh"

          docker_repository="polarismesh"
          docker_image="polaris-server-standalone"
          docker_tag=${SERVER_VERSION}

          docker buildx build --network=host --build-arg SERVER_VERSION="${SERVER_VERSION}" --build-arg CONSOLE_VERSION="${CONSOLE_VERSION}" --build-arg LIMITER_VERSION="${LIMITER_VERSION}" -t ${docker_repository}/${docker_image}:${docker_tag} -t ${docker_repository}/${docker_image}:latest --platform ${platforms} --push ./
